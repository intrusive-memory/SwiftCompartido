name: Long Tests

on:
  # Run on weekends at 2 AM UTC (Saturday and Sunday)
  schedule:
    - cron: '0 2 * * 6'  # Saturday at 2 AM UTC
    - cron: '0 2 * * 0'  # Sunday at 2 AM UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  test-long:
    name: iOS Tests (Long)
    runs-on: macos-26

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      - name: Show Swift version
        run: swift --version

      - name: Build for iOS Simulator
        run: |
          echo "🔨 Building for iOS Simulator (arm64)"
          xcodebuild build \
            -scheme SwiftCompartido \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 17 Pro' \
            -quiet \
            CODE_SIGNING_ALLOWED=NO

      - name: Run long tests on iOS Simulator
        timeout-minutes: 15
        run: |
          set +e

          TOTAL_CPUS=$(sysctl -n hw.ncpu)
          echo "🖥️  Total CPUs: $TOTAL_CPUS"
          echo "🧪 Running long tests on iOS Simulator"

          # Only run long-running test suites
          LONG_TESTS=(
            "IntegrationTests"
            "ElementViewTests"
            "AudioPlayerManagerTests"
            "TruncationDebugTests"
            "GeneratedContentSortingTests"
            "FountainParserProgressTests"
            "FDXParserProgressTests"
            "SwiftDataProgressTests"
            "PDFScreenplayParserTests"
            "DocumentImportTests"
            "DocumentExportTests"
            "FileIOProgressTests"
            "TextPackWriterProgressTests"
            "FountainParserTests"
            "GuionSerializationTests"
            "GuionParsedElementCollectionParsingTests"
            "TextPackTests"
            "TypedDataStorageTests"
            "CloudKitSupportTests"
            "UIOrderingRegressionTests"
            "ElementProgressStateTests"
            "ElementOrderingTests"
          )

          ONLY_ARGS=""
          for test in "${LONG_TESTS[@]}"; do
            ONLY_ARGS="$ONLY_ARGS -only-testing:SwiftCompartidoTests/$test"
          done

          # Run tests with xcodebuild for iOS Simulator
          xcodebuild test \
            -scheme SwiftCompartido \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 17 Pro' \
            -enableCodeCoverage YES \
            -parallel-testing-enabled YES \
            -maximum-parallel-testing-workers $TOTAL_CPUS \
            $ONLY_ARGS \
            CODE_SIGNING_ALLOWED=NO \
            > test_output_long.txt 2>&1
          TEST_EXIT_CODE=$?
          cat test_output_long.txt

          # Check if tests passed
          if grep -q "Test run with .* tests in .* suites passed\|TEST SUCCEEDED" test_output_long.txt; then
            echo "✅ All long tests passed"
            exit 0
          else
            echo "❌ Long tests failed"
            exit $TEST_EXIT_CODE
          fi

      - name: Generate coverage report
        continue-on-error: true
        run: |
          echo "📊 Generating coverage report from xcodebuild results"

          # Find the most recent .xcresult bundle
          XCRESULT=$(find ~/Library/Developer/Xcode/DerivedData -name "*.xcresult" -type d -print0 | xargs -0 ls -td | head -n 1)

          if [ -z "$XCRESULT" ]; then
            echo "⚠️  No .xcresult bundle found - skipping coverage report"
            exit 0
          fi

          echo "Using xcresult: $XCRESULT"

          # Export coverage data
          xcrun xccov view --report --json "$XCRESULT" > coverage.json 2>/dev/null || {
            echo "⚠️  Failed to generate coverage report"
            exit 0
          }

          echo "✅ Coverage report generated"

      - name: Upload coverage to Codecov
        if: hashFiles('coverage.json') != ''
        continue-on-error: true
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.json
          fail_ci_if_error: false

      - name: Generate test summary
        if: always()
        run: |
          echo "## Long Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scheduled run**: Weekend integration and UI tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f test_output_long.txt ]; then
            TEST_COUNT=$(grep -o "Executed [0-9]* tests" test_output_long.txt | head -1)
            echo "**Tests**: $TEST_COUNT" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Long Test Suites" >> $GITHUB_STEP_SUMMARY
          echo "- IntegrationTests" >> $GITHUB_STEP_SUMMARY
          echo "- ElementViewTests" >> $GITHUB_STEP_SUMMARY
          echo "- AudioPlayerManagerTests" >> $GITHUB_STEP_SUMMARY
          echo "- TruncationDebugTests" >> $GITHUB_STEP_SUMMARY
          echo "- GeneratedContentSortingTests" >> $GITHUB_STEP_SUMMARY
          echo "- FountainParserProgressTests" >> $GITHUB_STEP_SUMMARY
          echo "- FDXParserProgressTests" >> $GITHUB_STEP_SUMMARY
          echo "- SwiftDataProgressTests" >> $GITHUB_STEP_SUMMARY
          echo "- PDFScreenplayParserTests" >> $GITHUB_STEP_SUMMARY
          echo "- DocumentImportTests" >> $GITHUB_STEP_SUMMARY
          echo "- DocumentExportTests" >> $GITHUB_STEP_SUMMARY
          echo "- FileIOProgressTests" >> $GITHUB_STEP_SUMMARY
          echo "- TextPackWriterProgressTests" >> $GITHUB_STEP_SUMMARY
          echo "- FountainParserTests" >> $GITHUB_STEP_SUMMARY
          echo "- GuionSerializationTests" >> $GITHUB_STEP_SUMMARY
          echo "- GuionParsedElementCollectionParsingTests" >> $GITHUB_STEP_SUMMARY
          echo "- TextPackTests" >> $GITHUB_STEP_SUMMARY
          echo "- TypedDataStorageTests" >> $GITHUB_STEP_SUMMARY
          echo "- CloudKitSupportTests" >> $GITHUB_STEP_SUMMARY
          echo "- UIOrderingRegressionTests" >> $GITHUB_STEP_SUMMARY
          echo "- ElementProgressStateTests" >> $GITHUB_STEP_SUMMARY
          echo "- ElementOrderingTests" >> $GITHUB_STEP_SUMMARY
