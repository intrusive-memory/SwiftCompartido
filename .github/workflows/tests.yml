name: Tests

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test-short:
    name: iOS Tests (Short)
    runs-on: macos-26

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      - name: Show Swift version
        run: swift --version

      - name: Build for iOS Simulator
        run: |
          echo "üî® Building for iOS Simulator (arm64)"
          xcodebuild build \
            -scheme SwiftCompartido \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 17 Pro' \
            -quiet \
            CODE_SIGNING_ALLOWED=NO

      - name: Run short tests on iOS Simulator
        timeout-minutes: 10
        run: |
          set +e

          TOTAL_CPUS=$(sysctl -n hw.ncpu)
          echo "üñ•Ô∏è  Total CPUs: $TOTAL_CPUS"
          echo "üß™ Running short tests on iOS Simulator"

          # Skip long-running test suites
          SKIP_TESTS=(
            "IntegrationTests"
            "ElementViewTests"
            "AudioPlayerManagerTests"
            "TruncationDebugTests"
            "GeneratedContentSortingTests"
            "FountainParserProgressTests"
            "FDXParserProgressTests"
            "SwiftDataProgressTests"
            "PDFScreenplayParserTests"
            "DocumentImportTests"
            "DocumentExportTests"
            "FileIOProgressTests"
            "TextPackWriterProgressTests"
          )

          SKIP_ARGS=""
          for test in "${SKIP_TESTS[@]}"; do
            SKIP_ARGS="$SKIP_ARGS -skip-testing:SwiftCompartidoTests/$test"
          done

          # Run tests with xcodebuild for iOS Simulator
          xcodebuild test \
            -scheme SwiftCompartido \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 17 Pro' \
            -enableCodeCoverage YES \
            -parallel-testing-enabled YES \
            -maximum-parallel-testing-workers $TOTAL_CPUS \
            $SKIP_ARGS \
            CODE_SIGNING_ALLOWED=NO \
            > test_output_short.txt 2>&1
          TEST_EXIT_CODE=$?
          cat test_output_short.txt

          # Check if tests passed
          if grep -q "Test run with .* tests in .* suites passed\|TEST SUCCEEDED" test_output_short.txt; then
            echo "‚úÖ All short tests passed"
            exit 0
          else
            echo "‚ùå Short tests failed"
            exit $TEST_EXIT_CODE
          fi

  test-long:
    name: iOS Tests (Long)
    runs-on: macos-26

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      - name: Show Swift version
        run: swift --version

      - name: Build for iOS Simulator
        run: |
          echo "üî® Building for iOS Simulator (arm64)"
          xcodebuild build \
            -scheme SwiftCompartido \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 17 Pro' \
            -quiet \
            CODE_SIGNING_ALLOWED=NO

      - name: Run long tests on iOS Simulator
        timeout-minutes: 15
        run: |
          set +e

          TOTAL_CPUS=$(sysctl -n hw.ncpu)
          echo "üñ•Ô∏è  Total CPUs: $TOTAL_CPUS"
          echo "üß™ Running long tests on iOS Simulator"

          # Only run long-running test suites
          LONG_TESTS=(
            "IntegrationTests"
            "ElementViewTests"
            "AudioPlayerManagerTests"
            "TruncationDebugTests"
            "GeneratedContentSortingTests"
            "FountainParserProgressTests"
            "FDXParserProgressTests"
            "SwiftDataProgressTests"
            "PDFScreenplayParserTests"
            "DocumentImportTests"
            "DocumentExportTests"
            "FileIOProgressTests"
            "TextPackWriterProgressTests"
          )

          ONLY_ARGS=""
          for test in "${LONG_TESTS[@]}"; do
            ONLY_ARGS="$ONLY_ARGS -only-testing:SwiftCompartidoTests/$test"
          done

          # Run tests with xcodebuild for iOS Simulator
          xcodebuild test \
            -scheme SwiftCompartido \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 17 Pro' \
            -enableCodeCoverage YES \
            -parallel-testing-enabled YES \
            -maximum-parallel-testing-workers $TOTAL_CPUS \
            $ONLY_ARGS \
            CODE_SIGNING_ALLOWED=NO \
            > test_output_long.txt 2>&1
          TEST_EXIT_CODE=$?
          cat test_output_long.txt

          # Check if tests passed
          if grep -q "Test run with .* tests in .* suites passed\|TEST SUCCEEDED" test_output_long.txt; then
            echo "‚úÖ All long tests passed"
            exit 0
          else
            echo "‚ùå Long tests failed"
            exit $TEST_EXIT_CODE
          fi

      - name: Generate coverage report
        continue-on-error: true
        run: |
          echo "üìä Generating coverage report from xcodebuild results"

          # Find the most recent .xcresult bundle
          XCRESULT=$(find ~/Library/Developer/Xcode/DerivedData -name "*.xcresult" -type d -print0 | xargs -0 ls -td | head -n 1)

          if [ -z "$XCRESULT" ]; then
            echo "‚ö†Ô∏è  No .xcresult bundle found - skipping coverage report"
            exit 0
          fi

          echo "Using xcresult: $XCRESULT"

          # Export coverage data
          xcrun xccov view --report --json "$XCRESULT" > coverage.json 2>/dev/null || {
            echo "‚ö†Ô∏è  Failed to generate coverage report"
            exit 0
          }

          echo "‚úÖ Coverage report generated"

      - name: Upload coverage to Codecov
        if: hashFiles('coverage.json') != ''
        continue-on-error: true
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.json
          fail_ci_if_error: false

  catalyst-build:
    name: Mac Catalyst Build Check
    runs-on: macos-latest
    # Catalyst builds are informational - SwiftData has known limitations
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      - name: Show Swift version
        run: swift --version

      - name: Build for Mac Catalyst (arm64)
        id: catalyst_arm64
        continue-on-error: true
        run: |
          echo "Building for Mac Catalyst (arm64)..."
          xcodebuild build \
            -scheme SwiftCompartido \
            -destination 'generic/platform=macOS,variant=Mac Catalyst' \
            -arch arm64 \
            CODE_SIGNING_ALLOWED=NO \
            2>&1 | tee catalyst_build_arm64.log
          echo "arm64_exit_code=$?" >> $GITHUB_OUTPUT

      - name: Build for Mac Catalyst (x86_64)
        id: catalyst_x86
        continue-on-error: true
        run: |
          echo "Building for Mac Catalyst (x86_64)..."
          xcodebuild build \
            -scheme SwiftCompartido \
            -destination 'generic/platform=macOS,variant=Mac Catalyst' \
            -arch x86_64 \
            CODE_SIGNING_ALLOWED=NO \
            2>&1 | tee catalyst_build_x86.log
          echo "x86_exit_code=$?" >> $GITHUB_OUTPUT

      - name: Check for Catalyst-incompatible APIs
        run: |
          echo "Checking for macOS-specific APIs that may break Catalyst..."

          # Create a script to check for unguarded macOS-only APIs
          cat > check_catalyst.py <<'PYTHON_SCRIPT'
          import re
          import sys
          from pathlib import Path

          # macOS-only APIs to check for
          MACOS_APIS = [
              r'\.windowBackgroundColor',
              r'\bNSColor\b',
              r'\bNSFont\b',
              r'\bNSView\b',
              r'\bNSViewController\b',
              r'import AppKit',
              r'import Cocoa'
          ]

          def is_in_platform_guard(lines, line_num):
              """Check if a line is within a #if os(macOS) block"""
              # Look backwards to find the nearest #if directive
              guard_depth = 0
              for i in range(line_num - 1, -1, -1):
                  line = lines[i].strip()
                  if line.startswith('#endif'):
                      guard_depth += 1
                  elif line.startswith('#if'):
                      if guard_depth > 0:
                          guard_depth -= 1
                      else:
                          # Found the controlling #if
                          # Check if it's a macOS guard
                          return 'os(macOS)' in line and 'targetEnvironment(macCatalyst)' not in line
              return False

          found_issues = False
          ui_path = Path('Sources/SwiftCompartido/UI')

          if not ui_path.exists():
              print("UI directory not found, skipping check")
              sys.exit(0)

          for swift_file in ui_path.glob('*.swift'):
              with open(swift_file, 'r') as f:
                  lines = f.readlines()

              for line_num, line in enumerate(lines):
                  # Check for macOS-only APIs
                  for api_pattern in MACOS_APIS:
                      if re.search(api_pattern, line):
                          # Found an API usage - check if it's guarded
                          if not is_in_platform_guard(lines, line_num):
                              print(f"‚ö†Ô∏è  Unguarded macOS API in {swift_file}:{line_num + 1}")
                              print(f"   {line.strip()}")
                              found_issues = True

          if found_issues:
              print("\n‚ùå Found macOS-specific APIs without platform guards")
              sys.exit(1)
          else:
              print("‚úÖ No unguarded macOS-specific APIs found")
              sys.exit(0)
          PYTHON_SCRIPT

          python3 check_catalyst.py

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: catalyst-build-logs
          path: |
            catalyst_build_x86.log
            catalyst_build_arm64.log
          retention-days: 30

      - name: Generate Catalyst build summary
        if: always()
        run: |
          echo "## Mac Catalyst Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.catalyst_x86.outputs.x86_exit_code }}" == "0" ]; then
            echo "‚úÖ **x86_64**: Build succeeded" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è  **x86_64**: Build failed (known SwiftData limitation)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.catalyst_arm64.outputs.arm64_exit_code }}" == "0" ]; then
            echo "‚úÖ **arm64**: Build succeeded" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è  **arm64**: Build failed (known SwiftData limitation)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Known Limitations" >> $GITHUB_STEP_SUMMARY
          echo "SwiftData has limited Mac Catalyst support in current configuration." >> $GITHUB_STEP_SUMMARY
          echo "UI components are Catalyst-compatible where possible." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìã Build logs available in [artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

  lint:
    name: Code Quality
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for TODOs in committed code
        run: |
          if git diff origin/main...HEAD | grep -E "^\+.*TODO|^\+.*FIXME"; then
            echo "‚ö†Ô∏è  Warning: New TODOs or FIXMEs detected"
          fi

      - name: Check file sizes
        run: |
          find Sources -type f -name "*.swift" -size +100k -exec echo "‚ö†Ô∏è  Large file: {}" \;

      - name: Check for print statements
        run: |
          if grep -r "print(" Sources/ --include="*.swift" | grep -v "// print"; then
            echo "‚ö†Ô∏è  Warning: print() statements found in source code"
          fi
