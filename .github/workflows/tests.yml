name: Tests

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: macos-26

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      - name: Show Swift version
        run: swift --version

      - name: Build
        run: swift build

      - name: Run tests
        run: |
          set +e
          # Exclude performance tests from standard test run
          # Performance tests are run separately in the performance.yml workflow
          swift test --enable-code-coverage --filter-out '.*performance.*' > test_output.txt 2>&1
          TEST_EXIT_CODE=$?
          cat test_output.txt

          # Check if tests actually passed by looking for the success message
          if grep -q "Test run with .* tests in .* suites passed" test_output.txt; then
            echo "✅ All tests passed (excluding performance tests)"
            exit 0
          else
            echo "❌ Tests failed"
            exit $TEST_EXIT_CODE
          fi

      - name: Generate coverage report
        continue-on-error: true
        run: |
          # Swift 6.2 on macOS 26 has issues generating profdata
          # Make this step non-blocking until the issue is resolved
          if [ -f .build/debug/codecov/default.profdata ]; then
            xcrun llvm-cov export -format="lcov" \
              .build/debug/SwiftCompartidoPackageTests.xctest/Contents/MacOS/SwiftCompartidoPackageTests \
              -instr-profile .build/debug/codecov/default.profdata > coverage.lcov
          else
            echo "⚠️  Coverage profdata not generated - skipping coverage report"
            exit 0
          fi

      - name: Upload coverage to Codecov
        if: hashFiles('coverage.lcov') != ''
        continue-on-error: true
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.lcov
          fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for TODOs in committed code
        run: |
          if git diff origin/main...HEAD | grep -E "^\+.*TODO|^\+.*FIXME"; then
            echo "⚠️  Warning: New TODOs or FIXMEs detected"
          fi

      - name: Check file sizes
        run: |
          find Sources -type f -name "*.swift" -size +100k -exec echo "⚠️  Large file: {}" \;

      - name: Check for print statements
        run: |
          if grep -r "print(" Sources/ --include="*.swift" | grep -v "// print"; then
            echo "⚠️  Warning: print() statements found in source code"
          fi
